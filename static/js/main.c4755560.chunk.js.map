{"version":3,"sources":["components/Current.js","components/Daily.js","App.js","components/Location.js","serviceWorker.js","index.js"],"names":["current","props","react_default","a","createElement","className","class","id","Math","floor","data","currently","temperature","lib_default","name","iconId","icon","summary","daily","timeStamp","day","time","Date","getDay","apparentTemperatureHigh","apparentTemperatureLow","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","isLoaded","_this2","latitude","location","longitude","fetch","mode","headers","Access-Control-Allow-Origin","then","res","json","setState","_this$state","reactstrap_es","src","alt","components_Current","components_Daily","Component","Location","isGeolocationAvailable","isGeolocationEnabled","coords","src_App","React","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","hostname","match","ReactDOM","render","components_Location","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4755560.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../CSS/Current.css';\r\nimport WeatherIcon from 'react-icons-weather';\r\n\r\nconst current = (props) => {\r\n\r\n\r\n    return (\r\n        <div className=\"current-container\">\r\n            <div>\r\n                <h1 className=\"City\">Currently</h1>\r\n            </div>\r\n            <div className=\"content\">\r\n                <div class=\"degrees\">\r\n                    <h1 id=\"temp\">{Math.floor(props.data.currently.temperature) + '\\u00b0F'}</h1>\r\n                </div>\r\n                <WeatherIcon name=\"darksky\" iconId={props.data.currently.icon} />\r\n                <h1 id=\"desc\">{props.data.currently.summary}</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default current;","import React from 'react';\r\nimport '../CSS/Daily.css';\r\nimport WeatherIcon from 'react-icons-weather';\r\n\r\n\r\nconst daily = (props) => {\r\n    let timeStamp = props.day.time;\r\n    let a = new Date(timeStamp * 1000);\r\n    const days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat'];\r\n    // clear-day, clear-night, rain, snow, sleet, wind, fog, cloudy, partly-cloudy-day, or partly-cloudy-night\r\n\r\n    return (\r\n        <div className=\"seven-day\">\r\n            <p className=\"h5\">{days[a.getDay()]}</p>\r\n            <WeatherIcon name=\"darksky\" iconId={props.day.icon}  />\r\n            <p className=\"h5\">{Math.floor(props.day.apparentTemperatureHigh)}</p>\r\n            <p className=\"h5\">{Math.floor(props.day.apparentTemperatureLow)}</p>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default daily;","import React, { Component } from 'react';\nimport key from './key';\nimport Current from './components/Current';\nimport Daily from './components/Daily';\nimport { Container, Col, Row } from 'reactstrap';\n\n\nclass App extends Component { \n\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherData: [],\n      isLoaded: false,\n    }\n  }\n\n\n  componentDidMount() {\n    this.latitude = this.props.location.latitude;\n    this.longitude = this.props.location.longitude;\n\n    fetch('https://api.darksky.net/forecast/' + key + '/' + this.latitude + ',' + this.longitude, {\n      mode: 'cors',\n      headers: {\"Access-Control-Allow-Origin\": true}\n    })\n    .then(res => res.json())\n    .then(json => {\n      this.setState({\n        isLoaded: true,\n        weatherData: json,\n      })\n    });\n  }\n\n\n  render() {\n    let { isLoaded, weatherData } = this.state;\n\n    if (!isLoaded) {\n      return <div>Loading..</div>\n    } else {\n    return (\n      \n      <div className=\"App\">\n      <Container>\n        <Row className=\"row-eq-height\">\n          <Col>\n            <img src=\"https://cdn.dribbble.com/users/324739/screenshots/1931921/landscape-loop-final.gif\" alt=\"\"></img>\n          </Col>\n          <Col>\n          <Current data={weatherData} location={this.props.location}/>\n          <Row>\n            <Col>\n            <Daily day={weatherData.daily.data[0]} />\n            </Col>\n            <Col>\n            <Daily day={weatherData.daily.data[1]} />\n            </Col>\n            <Col>\n            <Daily day={weatherData.daily.data[2]} />\n            </Col>\n            <Col>\n            <Daily day={weatherData.daily.data[3]} />\n            </Col>\n            <Col>\n            <Daily day={weatherData.daily.data[4]} />\n            </Col>\n            <Col>\n            <Daily day={weatherData.daily.data[5]} />\n            </Col>\n            <Col>\n            <Daily day={weatherData.daily.data[6]} />\n            </Col>\n          </Row>\n          </Col>\n          </Row>\n      </Container>\n      </div>\n    );}\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport { geolocated } from 'react-geolocated';\r\nimport App from '../App';\r\n\r\nclass Location extends React.Component {\r\n    render() {\r\n        return !this.props.isGeolocationAvailable\r\n          ? <div>Your browser does not support Geolocation</div>\r\n          : !this.props.isGeolocationEnabled\r\n            ? <div>Geolocation is not enabled</div>\r\n            : this.props.coords\r\n              ? \r\n                <App location={this.props.coords}/>\r\n              : <div>Getting the location data&hellip; </div>;\r\n      }\r\n    }\r\n     \r\n    export default geolocated({\r\n      positionOptions: {\r\n        enableHighAccuracy: false,\r\n      },\r\n      userDecisionTimeout: 5000,\r\n    })(Location);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Location from './components/Location';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<Location />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}